<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Current Sprint | Goalpost</title>
	<link rel="stylesheet" type="text/css" href="style.css">
	<link rel="manifest" href="/site.webmanifest">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
</head>
<body onload="onPageLoad()">
  <div class="scroll-loader" style="display: none">loading...</div>
  <div class="accounts-list"></div>
  <div class="last-updated" style="display: none"></div>
  <script src="https://cdn.plaid.com/link/v2/stable/link-initialize.js"></script>
  <script src="/node_modules/moment/min/moment.min.js"></script>
  <script src="/account-card.js"></script>
  <script src="/animated-scroller.js"></script>
  <script>
	let lastUpdated;
	let lastUpdatedDisplay;

	async function onPageLoad()
	{
		/*var handler = Plaid.create({
			apiVersion: 'v2',
			clientName: 'Goalpost',
			env: '{{PLAID_ENV}}',
			product: ['transactions'],
			key: '{{PLAID_PUBLIC_KEY}}',
			onSuccess: function(public_token) {
				$.post('/get_access_token', {
				public_token: public_token
				}, function() {
					$('#app').fadeIn('slow');
				});
			},
		});*/

		/*$('#link-btn').on('click', function(e) {
			handler.open();
		});*/

		refreshPage();

		let overscrolled = false;
		const loader = document.querySelector(".scroll-loader");

		window.onscroll = evt => {
			console.log(window.scrollY);

			if (window.scrollY < -60)
			{
				overscrolled = true;
				loader.style.display = "";
			}
			if (window.scrollY >= -60 && overscrolled)
			{
				overscrolled = false;
				refreshPage();
				loader.style.display = "none";
			}
		};

		lastUpdatedDisplay = document.querySelector(".last-updated");

		setInterval(() => updateLastUpdatedDisplay(), 5000);
	}

	function updateLastUpdatedDisplay()
	{
		if (!lastUpdated)
			return;

		lastUpdatedDisplay.style.display = "";

		const now = new Date();
		const ms = now.getTime() - lastUpdated.getTime();
		const minutes = Math.round(ms / 1000 / 60);
		if (ms < 60000)
			lastUpdatedDisplay.innerHTML = `Updated just now`;
		else
			lastUpdatedDisplay.innerHTML = `Updated ${minutes} ${minutes >  1 ? "minutes" : "minute"} ago`;
	}

	async function refreshPage()
	{
		const res = await fetch("/transactions", {
			method: "GET"
		});

		const resData = await res.json();
		const accountsList = document.querySelector(".accounts-list");

		accountsList.innerHTML = "";

		for (let account of resData.accounts)
		{
			// Get all transactions for this account that happened since the beginning of this week
			const transactions = resData.transactions.filter(t => 
			(
				t.account_id === account.account_id &&
				moment(t.date).diff(moment(beginningOfWeek()), "days") >= 0
			));

			const card = new AccountCardElement(account, transactions);
			accountsList.appendChild(card);
		}

		lastUpdated = new Date();
		updateLastUpdatedDisplay();
	}

	function beginningOfWeek()
	{
		const prevMonday = new Date();
		prevMonday.setDate(prevMonday.getDate() - (prevMonday.getDay() + 6) % 7);
		prevMonday.setHours(0);
		prevMonday.setMinutes(0);
		prevMonday.setSeconds(0);
		prevMonday.setMilliseconds(0);
		return prevMonday;
	}
  </script>
</body>
</html>
